# Supervisord configuration for sensor hub multi-process connector
# This configuration demonstrates proper process orchestration and dependency management

[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor

# Redirect all logs to stdout/stderr for Docker log aggregation
loglevel=info

# Process 1: Serial Handler (Python/Flask)
# Priority 100: Starts first, no dependencies
# This service simulates reading from serial-connected sensors (temperature, humidity)
[program:serial-handler]
command=python -u /app/services/serial-handler/app.py
directory=/app/services/serial-handler
autostart=true
autorestart=true
startretries=3
priority=100
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
environment=
    PYTHONUNBUFFERED="1",
    FLASK_APP="app.py",
    SERVICE_PORT="5001"

# Process 2: HTTP Poller (Node.js/Express)
# Priority 100: Starts first, no dependencies
# This service polls HTTP-based sensors (motion detectors) and provides status API
[program:http-poller]
command=node /app/services/http-poller/index.js
directory=/app/services/http-poller
autostart=true
autorestart=true
startretries=3
priority=100
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
environment=
    NODE_ENV="production",
    SERVICE_PORT="5002",
    POLL_INTERVAL="5000"

# Process 3: State Aggregator (Python/Flask)
# Priority 200: Starts after protocol handlers are ready
# Wait 5 seconds for handlers to be available before starting
# This service coordinates data from protocol handlers and provides unified API
[program:state-aggregator]
command=python -u /app/services/state-aggregator/app.py
directory=/app/services/state-aggregator
autostart=true
autorestart=true
startretries=5
startsecs=5
priority=200
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
environment=
    PYTHONUNBUFFERED="1",
    FLASK_APP="app.py",
    SERVICE_PORT="5003",
    SERIAL_HANDLER_URL="http://localhost:5001",
    HTTP_POLLER_URL="http://localhost:5002",
    CACHE_TTL="10"

# Process 4: MQTT Bridge (Python)
# Priority 300: Starts last, depends on all other services
# Wait 10 seconds to ensure all APIs are ready
# This is the main process that implements IoT2MQTT contract
[program:mqtt-bridge]
command=python -u /app/mqtt_bridge.py
directory=/app
autostart=true
autorestart=true
startretries=5
startsecs=10
priority=300
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
environment=
    PYTHONUNBUFFERED="1",
    STATE_AGGREGATOR_URL="http://localhost:5003",
    UPDATE_INTERVAL="10"

# Event listener configuration for debugging
# Logs all process state changes for troubleshooting
[eventlistener:stdout]
command=cat
events=PROCESS_LOG
buffer_size=100
