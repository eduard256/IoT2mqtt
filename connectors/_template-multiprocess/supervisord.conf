# Supervisord Configuration for Multi-Process Connector
# This configuration manages multiple processes within a single container
# Supervisord handles startup ordering, automatic restart, and log aggregation

[supervisord]
# Run in foreground (nodaemon=true) so Docker can monitor the process
nodaemon=true
# Log to stdout/stderr for Docker logging integration
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
# Increase log level to info for better debugging
loglevel=info
# Run as root (required in container context)
user=root

# ============================================================================
# Backend Services
# These services start first (lower priority) and expose HTTP APIs
# ============================================================================

# Python Service - Demonstrates additional Python process
[program:python-service]
# Command to execute - runs the Python service
command=python /app/services/python-service/app.py
# Start automatically when supervisord starts
autostart=true
# Restart policy: always restart if the process dies
# Options: false, unexpected, true
autorestart=true
# Priority determines startup order (lower numbers start first)
# Backend services should start before the MQTT bridge
priority=10
# Redirect stdout/stderr to Docker's logging
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Environment variables specific to this service
# Services communicate via localhost since they share the network namespace
environment=SERVICE_PORT=5001,LOG_LEVEL=INFO

# Node.js Service - Demonstrates multi-language integration
[program:nodejs-service]
# Command to execute - runs the Node.js Express app
command=node /app/services/nodejs-service/index.js
# Working directory for the service
directory=/app/services/nodejs-service
autostart=true
autorestart=true
priority=10
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Environment variables for Node.js service
environment=PORT=5002,NODE_ENV=production

# ============================================================================
# MQTT Bridge - Main Coordinator
# This service implements the IoT2MQTT contract and coordinates backend services
# ============================================================================

[program:mqtt-bridge]
# The MQTT bridge starts last (high priority) after backend services are ready
command=python /app/mqtt_bridge.py
autostart=true
autorestart=true
# Higher priority ensures backend services are running first
priority=999
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Environment variables for MQTT bridge
# MQTT credentials come from .env file mounted by docker_service
# Internal service URLs use localhost since all processes share network namespace
environment=PYTHON_SERVICE_URL=http://localhost:5001,NODEJS_SERVICE_URL=http://localhost:5002

# ============================================================================
# Additional Services Template
# Copy and customize this section for additional services
# ============================================================================

# Example: go2rtc binary (uncomment and customize if needed)
# [program:go2rtc]
# command=/usr/local/bin/go2rtc -c /app/config/go2rtc.yaml
# autostart=true
# autorestart=true
# priority=5
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0

# ============================================================================
# Supervisord Control Socket
# Allows supervisorctl commands for process management
# ============================================================================

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

# ============================================================================
# Notes for Customization:
# ============================================================================
# 1. Add new services by copying a [program:*] section
# 2. Adjust priority to control startup order (lower = starts first)
# 3. Set autorestart=true for critical services
# 4. Use environment= to pass service-specific configuration
# 5. All services can communicate via http://localhost:{port}
# 6. Logs automatically go to Docker via stdout/stderr redirection
# 7. The MQTT bridge should always have the highest priority
